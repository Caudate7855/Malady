//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Project/PlayerInputs/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Project/PlayerInputs/PlayerInputs.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""0c967b55-e2ed-4304-83e9-435df3a86b2f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""820afd6b-5191-415f-ab1a-030e82210eb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""f5544ec6-3e26-4948-b990-274d5d452c87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SummonSpell 1"",
                    ""type"": ""Button"",
                    ""id"": ""aea0fac7-9a14-440c-8467-70f6605b4654"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SummonSpell 2"",
                    ""type"": ""Button"",
                    ""id"": ""0a0de187-03a8-4f1c-8b4a-f2788180a5ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SummonSpell 3"",
                    ""type"": ""Button"",
                    ""id"": ""55389bea-5c77-4560-a2a7-b3bf27b92851"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SummonSpell 4"",
                    ""type"": ""Button"",
                    ""id"": ""2bcb511c-6704-4ed1-ab71-fc08be9c6248"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerSpell 1"",
                    ""type"": ""Button"",
                    ""id"": ""09fd2924-2fd0-4ff0-a6d4-061f2de00235"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerSpell 2"",
                    ""type"": ""Button"",
                    ""id"": ""11295637-9495-48f4-83d5-0e5d23547839"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerSpell 3"",
                    ""type"": ""Button"",
                    ""id"": ""3702b3c6-c72d-4a4a-89e2-e28ad6eb2974"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerSpell 4"",
                    ""type"": ""Button"",
                    ""id"": ""2fd539de-eb19-431e-ac96-a31550e33d64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f20414d-0d2d-4fcd-81fe-318f46e900cf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8ad03a8-c681-48ea-b413-cf782fff2b87"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a6e50a4-d31b-433e-9b35-1132ee746d80"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""480e8d19-8394-4dc3-b08b-228f4ee43656"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SummonSpell 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3e62964-abe1-4626-8407-20b852e9a18f"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SummonSpell 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6e222d0-4242-462e-b8c6-e537ef2e837f"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SummonSpell 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6916c8f-c567-4c88-8405-eca75aaa8925"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SummonSpell 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b26cb63a-9a5a-4dd4-ad33-8242eb6de285"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerSpell 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2d0f7e1-00fd-4f4b-814e-f5d4013830cc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerSpell 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8705c88b-eca6-474f-8fb8-dcf812b6e24d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerSpell 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3647b4fb-bd2f-4b3e-83a0-5a175e7b88a6"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerSpell 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Movement = m_Gameplay.FindAction("Movement", throwIfNotFound: true);
        m_Gameplay_Inventory = m_Gameplay.FindAction("Inventory", throwIfNotFound: true);
        m_Gameplay_SummonSpell1 = m_Gameplay.FindAction("SummonSpell 1", throwIfNotFound: true);
        m_Gameplay_SummonSpell2 = m_Gameplay.FindAction("SummonSpell 2", throwIfNotFound: true);
        m_Gameplay_SummonSpell3 = m_Gameplay.FindAction("SummonSpell 3", throwIfNotFound: true);
        m_Gameplay_SummonSpell4 = m_Gameplay.FindAction("SummonSpell 4", throwIfNotFound: true);
        m_Gameplay_PlayerSpell1 = m_Gameplay.FindAction("PlayerSpell 1", throwIfNotFound: true);
        m_Gameplay_PlayerSpell2 = m_Gameplay.FindAction("PlayerSpell 2", throwIfNotFound: true);
        m_Gameplay_PlayerSpell3 = m_Gameplay.FindAction("PlayerSpell 3", throwIfNotFound: true);
        m_Gameplay_PlayerSpell4 = m_Gameplay.FindAction("PlayerSpell 4", throwIfNotFound: true);
    }

    ~@PlayerInputs()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, PlayerInputs.Gameplay.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Movement;
    private readonly InputAction m_Gameplay_Inventory;
    private readonly InputAction m_Gameplay_SummonSpell1;
    private readonly InputAction m_Gameplay_SummonSpell2;
    private readonly InputAction m_Gameplay_SummonSpell3;
    private readonly InputAction m_Gameplay_SummonSpell4;
    private readonly InputAction m_Gameplay_PlayerSpell1;
    private readonly InputAction m_Gameplay_PlayerSpell2;
    private readonly InputAction m_Gameplay_PlayerSpell3;
    private readonly InputAction m_Gameplay_PlayerSpell4;
    /// <summary>
    /// Provides access to input actions defined in input action map "Gameplay".
    /// </summary>
    public struct GameplayActions
    {
        private @PlayerInputs m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public GameplayActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/Movement".
        /// </summary>
        public InputAction @Movement => m_Wrapper.m_Gameplay_Movement;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/Inventory".
        /// </summary>
        public InputAction @Inventory => m_Wrapper.m_Gameplay_Inventory;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/SummonSpell1".
        /// </summary>
        public InputAction @SummonSpell1 => m_Wrapper.m_Gameplay_SummonSpell1;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/SummonSpell2".
        /// </summary>
        public InputAction @SummonSpell2 => m_Wrapper.m_Gameplay_SummonSpell2;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/SummonSpell3".
        /// </summary>
        public InputAction @SummonSpell3 => m_Wrapper.m_Gameplay_SummonSpell3;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/SummonSpell4".
        /// </summary>
        public InputAction @SummonSpell4 => m_Wrapper.m_Gameplay_SummonSpell4;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/PlayerSpell1".
        /// </summary>
        public InputAction @PlayerSpell1 => m_Wrapper.m_Gameplay_PlayerSpell1;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/PlayerSpell2".
        /// </summary>
        public InputAction @PlayerSpell2 => m_Wrapper.m_Gameplay_PlayerSpell2;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/PlayerSpell3".
        /// </summary>
        public InputAction @PlayerSpell3 => m_Wrapper.m_Gameplay_PlayerSpell3;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/PlayerSpell4".
        /// </summary>
        public InputAction @PlayerSpell4 => m_Wrapper.m_Gameplay_PlayerSpell4;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="GameplayActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="GameplayActions" />
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @SummonSpell1.started += instance.OnSummonSpell1;
            @SummonSpell1.performed += instance.OnSummonSpell1;
            @SummonSpell1.canceled += instance.OnSummonSpell1;
            @SummonSpell2.started += instance.OnSummonSpell2;
            @SummonSpell2.performed += instance.OnSummonSpell2;
            @SummonSpell2.canceled += instance.OnSummonSpell2;
            @SummonSpell3.started += instance.OnSummonSpell3;
            @SummonSpell3.performed += instance.OnSummonSpell3;
            @SummonSpell3.canceled += instance.OnSummonSpell3;
            @SummonSpell4.started += instance.OnSummonSpell4;
            @SummonSpell4.performed += instance.OnSummonSpell4;
            @SummonSpell4.canceled += instance.OnSummonSpell4;
            @PlayerSpell1.started += instance.OnPlayerSpell1;
            @PlayerSpell1.performed += instance.OnPlayerSpell1;
            @PlayerSpell1.canceled += instance.OnPlayerSpell1;
            @PlayerSpell2.started += instance.OnPlayerSpell2;
            @PlayerSpell2.performed += instance.OnPlayerSpell2;
            @PlayerSpell2.canceled += instance.OnPlayerSpell2;
            @PlayerSpell3.started += instance.OnPlayerSpell3;
            @PlayerSpell3.performed += instance.OnPlayerSpell3;
            @PlayerSpell3.canceled += instance.OnPlayerSpell3;
            @PlayerSpell4.started += instance.OnPlayerSpell4;
            @PlayerSpell4.performed += instance.OnPlayerSpell4;
            @PlayerSpell4.canceled += instance.OnPlayerSpell4;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="GameplayActions" />
        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @SummonSpell1.started -= instance.OnSummonSpell1;
            @SummonSpell1.performed -= instance.OnSummonSpell1;
            @SummonSpell1.canceled -= instance.OnSummonSpell1;
            @SummonSpell2.started -= instance.OnSummonSpell2;
            @SummonSpell2.performed -= instance.OnSummonSpell2;
            @SummonSpell2.canceled -= instance.OnSummonSpell2;
            @SummonSpell3.started -= instance.OnSummonSpell3;
            @SummonSpell3.performed -= instance.OnSummonSpell3;
            @SummonSpell3.canceled -= instance.OnSummonSpell3;
            @SummonSpell4.started -= instance.OnSummonSpell4;
            @SummonSpell4.performed -= instance.OnSummonSpell4;
            @SummonSpell4.canceled -= instance.OnSummonSpell4;
            @PlayerSpell1.started -= instance.OnPlayerSpell1;
            @PlayerSpell1.performed -= instance.OnPlayerSpell1;
            @PlayerSpell1.canceled -= instance.OnPlayerSpell1;
            @PlayerSpell2.started -= instance.OnPlayerSpell2;
            @PlayerSpell2.performed -= instance.OnPlayerSpell2;
            @PlayerSpell2.canceled -= instance.OnPlayerSpell2;
            @PlayerSpell3.started -= instance.OnPlayerSpell3;
            @PlayerSpell3.performed -= instance.OnPlayerSpell3;
            @PlayerSpell3.canceled -= instance.OnPlayerSpell3;
            @PlayerSpell4.started -= instance.OnPlayerSpell4;
            @PlayerSpell4.performed -= instance.OnPlayerSpell4;
            @PlayerSpell4.canceled -= instance.OnPlayerSpell4;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="GameplayActions.UnregisterCallbacks(IGameplayActions)" />.
        /// </summary>
        /// <seealso cref="GameplayActions.UnregisterCallbacks(IGameplayActions)" />
        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="GameplayActions.AddCallbacks(IGameplayActions)" />
        /// <seealso cref="GameplayActions.RemoveCallbacks(IGameplayActions)" />
        /// <seealso cref="GameplayActions.UnregisterCallbacks(IGameplayActions)" />
        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="GameplayActions" /> instance referencing this action map.
    /// </summary>
    public GameplayActions @Gameplay => new GameplayActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Gameplay" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="GameplayActions.AddCallbacks(IGameplayActions)" />
    /// <seealso cref="GameplayActions.RemoveCallbacks(IGameplayActions)" />
    public interface IGameplayActions
    {
        /// <summary>
        /// Method invoked when associated input action "Movement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Inventory" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInventory(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SummonSpell 1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSummonSpell1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SummonSpell 2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSummonSpell2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SummonSpell 3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSummonSpell3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SummonSpell 4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSummonSpell4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PlayerSpell 1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlayerSpell1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PlayerSpell 2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlayerSpell2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PlayerSpell 3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlayerSpell3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PlayerSpell 4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlayerSpell4(InputAction.CallbackContext context);
    }
}
